{"version":3,"sources":["Components/profile.jsx","App.js","serviceWorker.js","index.js"],"names":["Profile","props","state","className","this","show","src","alt","width","height","fullName","bio","profession","Component","App","ChangeShow","setState","Show","console","log","person","imgSrc","timer","setInterval","Date","toString","slice","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wNAqBeA,E,kDAnBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDAKf,OACI,yBAAKC,WAA6B,IAAlBC,KAAKH,MAAMI,KAAY,QAAQ,QAC3C,yBAAKC,IAAKF,KAAKH,MAAMK,IAAKC,IAAI,GAAGC,MAAM,QAAQC,OAAO,UACtD,yBAAKN,UAAU,QACf,4BAAKC,KAAKH,MAAMS,UAChB,4BAAKN,KAAKH,MAAMU,KAChB,4BAAKP,KAAKH,MAAMW,kB,GAZVC,aCkCPC,G,wDA9Bb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IAOVc,WAAW,WACX,EAAKC,SAAS,CAACC,MAAM,EAAKf,MAAMe,OAChCC,QAAQC,IAAI,EAAKjB,MAAMe,OARnB,EAAKf,MAAQ,CACXkB,OAAO,CAACV,SAAS,iBAAiBC,IAAI,MAAOU,OAAO,yOAA0OT,WAAW,WACzSK,MAAK,EACLK,MAAM,IALS,E,gEAYC,IAAD,OACjBC,aAAY,WAChB,EAAKP,SAAS,CAACM,OAAM,IAAIE,MAAOC,WAAWC,MAAM,GAAG,QAC9C,O,+BAGF,OACA,yBAAKvB,UAAU,aACb,wBAAIA,UAAU,QAAQC,KAAKF,MAAMoB,OACjC,4BAAQnB,UAAU,MAAMwB,QAASvB,KAAKW,YAAtC,QACA,kBAAC,EAAD,CAASL,SAAUN,KAAKF,MAAMkB,OAAOV,SAAUC,IAAKP,KAAKF,MAAMkB,OAAOT,IAAKL,IAAKF,KAAKF,MAAMkB,OAAOC,OAAQT,WAAYR,KAAKF,MAAOkB,OAAOR,WAAYP,KAAMD,KAAKF,MAAMe,Y,GAvB1JJ,cCQEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.48379159.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className={this.props.show===true?\"popup\":\"none\"}>\r\n                <img src={this.props.src} alt=\"\" width=\"250px\" height=\"350px\"/>\r\n                <div className=\"text\">\r\n                <h1>{this.props.fullName}</h1>\r\n                <h2>{this.props.bio}</h2>\r\n                <h2>{this.props.profession}</h2>\r\n                </div>\r\n            </div> \r\n        \r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;","import React, { Component } from 'react';\nimport Profile from './Components/profile';\nimport \"./App.css\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      person:{fullName:\"Makki Boukhris\",bio:\"bio\", imgSrc:\"https://scontent.ftun3-1.fna.fbcdn.net/v/t1.0-9/69370951_2401033676646860_8708337464437112832_o.jpg?_nc_cat=108&_nc_sid=09cbfe&_nc_ohc=04CvLmLuY5IAX8MkfZm&_nc_ht=scontent.ftun3-1.fna&oh=cf7a99a6e7ff5bfa94a4fa6dae977b6a&oe=5F9917D7\", profession:\"Student\"},\n      Show:false,\n      timer:\"\"\n    }\n  }\nChangeShow=()=>{\nthis.setState({Show:!this.state.Show})\nconsole.log(this.state.Show)\n  }\n  componentDidMount(){\n    setInterval(()=>{\nthis.setState({timer:new Date().toString().slice(15,25)})\n    },1000)\n  }\n  render() { \n    return (  \n    <div className=\"container\">\n      <h1 className=\"text\">{this.state.timer}</h1>\n      <button className=\"btn\" onClick={this.ChangeShow}>Show</button>\n      <Profile fullName={this.state.person.fullName} bio={this.state.person.bio} src={this.state.person.imgSrc} profession={this.state. person.profession} show={this.state.Show}/>\n      \n      \n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}